_C PROGRAMMING COLUMN_
by Al Stevens

Listing One

/* ------- interp.h -------- */

#ifndef INTERP_H
#define INTERP_H

#include "dflat.h"

#define QUINCY "Quincy"

/* ----- Menu and dialog box command codes ------ */
enum    {
    ID_OUTPUT = 200,
    ID_SCROLLBARS,
    ID_RUN,
    ID_STEP,
    ID_STOP,
    ID_BREAKPOINT,
    ID_WATCH,
    ID_DELBREAKPOINTS,
    ID_COMMANDLINE,
    ID_EXAMINE,
    ID_CHANGE,
    ID_VALUE,
    ID_STEPOVER,
    ID_ADDWATCH,
    ID_SWITCHWINDOW,
    ID_MEMORY,
    ID_PROGSIZE,
    ID_DATASPACE,
    ID_VARIABLES,
    ID_STACK,
    ID_JUMP
};
void qinterpmain(unsigned char *source, int argc, char *argv[]);
void HideIDE(void);
void UnHideIDE(void);
void PrintSourceCode(void);
void unBreak(void);
void reBreak(void);
int PrintSetupProc(WINDOW, MESSAGE, PARAM, PARAM);

extern WINDOW editWnd;
extern WINDOW applWnd;
extern int currx, curry;
extern DBOX Display;
extern DBOX PrintSetup;
extern DBOX MemoryDB;

#endif


Listing Two

/* --------------- qnc.c ----------- */
#include <process.h>
#include <alloc.h>
#include "dflat.h"
#include "qnc.h"
#include "interp.h"
#include "debugger.h"

char DFlatApplication[] = QUINCY;
static char Untitled[] = "Untitled";
char **Argv;

WINDOW editWnd;
WINDOW applWnd;
WINDOW watchWnd;
BOOL Exiting;
BOOL CtrlBreaking;

static char *qhdr = QUINCY " " QVERSION;
extern unsigned _stklen = 16384;
static void interrupt (*oldbreak)(void);
static void interrupt (*oldctrlc)(void);
static BOOL brkct;
static int QuincyProc(WINDOW, MESSAGE, PARAM, PARAM);
static void SelectFile(void);
static void OpenSourceCode(char *);
static void LoadFile(void);
static void SaveFile(int);
void ToggleBreakpoint(void);
void DeleteBreakpoints(void);
static int QncEditorProc(WINDOW, MESSAGE, PARAM, PARAM);
static char *NameComponent(char *);
static void ChangeTabs(void);
static void FixTabMenu(void);
static void CloseSourceCode(void);
static void OutputScreen(void);
static void Memory(void);
static void ChangeQncTitle(void);

void main(int argc, char *argv[])
{
    int hasscr = 0;
    if (!init_messages())
        return;
    curr_cursor(&currx, &curry);
    setcbrk(0);
    reBreak();
    Argv = argv;
    if (!LoadConfig())
        cfg.ScreenLines = SCREENHEIGHT;
    applWnd = CreateWindow(APPLICATION, qhdr, 0, 0, -1, -1, &MainMenu,
                        NULL, QuincyProc, HASSTATUSBAR );
    ClearAttribute(applWnd, CONTROLBOX);
    LoadHelpFile();
    if (SendMessage(NULL, MOUSE_INSTALLED, 0, 0))
        hasscr = VSCROLLBAR | HSCROLLBAR;
    editWnd = CreateWindow(EDITOR, NULL, GetClientLeft(applWnd), 
                GetClientTop(applWnd), ClientHeight(applWnd), 
                ClientWidth(applWnd), NULL, NULL, QncEditorProc,
                hasscr | HASBORDER | MULTILINE);
    ChangeQncTitle();
    SendMessage(editWnd, SETFOCUS, TRUE, 0);
    if (argc > 1)
        OpenSourceCode(argv[1]);
    while (dispatch_message())
        ;
    unBreak();
    cursor(currx, curry);
}
/* -- interception and management of Ctrl+C and Ctrl+Break -- */
static void interrupt newbreak(void)
{
    return;
}
int CBreak(void)
{
    if (!Stepping)    {
        CtrlBreaking = TRUE;
        if (inSystem)
            longjmp(BreakJmp, 1);
    }
    return 1;
}
void unBreak(void)
{
    if (brkct)    {
        setvect(0x1b, oldbreak);
        setvect(0x23, oldctrlc);
        ctrlbrk(CBreak);
        brkct = FALSE;
    }
}
void reBreak(void)
{
    if (!brkct)    {
        oldctrlc = getvect(0x23);
        oldbreak = getvect(0x1b);
        setvect(0x23, newbreak);
        setvect(0x1b, newbreak);
        brkct = TRUE;
    }
}
/* --- change application window title to show filename --- */
static void ChangeQncTitle(void)
{
    char *ttl;
    char *cp = Untitled;
    char *cp1 = editWnd->extension;
    int len = 13;

    if (cp1 && *cp1)    {
        cp = strrchr(cp1, '\\');
        if (cp == NULL)
            cp = strchr(cp1, ':');
        if (cp == NULL)
            cp = cp1;
        else
            cp++;
        len = strlen(cp) + 3;
    }
    ttl = DFmalloc(strlen(qhdr) + len);
    strcpy(ttl, qhdr);
    strcat(ttl, ": ");
    strcat(ttl, cp);
    AddTitle(applWnd, ttl);
    free(ttl);
}
/* --- window processing module for Quincy application --- */
static int QuincyProc(WINDOW wnd,MESSAGE msg,PARAM p1,PARAM p2)
{
    int rtn;
    static BOOL InterceptingShow = FALSE;
    BOOL ThisSbarSetting;
    static BOOL PrevSbarSetting;
    static int PrevScreenLines;
    switch (msg)    {
        case CREATE_WINDOW:
            rtn = DefaultWndProc(wnd, msg, p1, p2);
            if (SendMessage(NULL, MOUSE_INSTALLED, 0, 0))
                SetCheckBox(&Display, ID_SCROLLBARS);
            else
                ClearCheckBox(&Display, ID_SCROLLBARS);
            FixTabMenu();
            return rtn;
        case SIZE:
        {
            int dif = (int) p2 - GetBottom(wnd);
            int EditBottom = p2 - BottomBorderAdj(wnd);
            if (watchWnd != NULL &&
                    TestAttribute(watchWnd, VISIBLE))
                EditBottom -= WindowHeight(watchWnd);
            if (dif > 0)    {
                /* --- getting bigger--- */
                rtn = DefaultWndProc(wnd, msg, p1, p2);
                SendMessage(watchWnd, MOVE, GetLeft(watchWnd),
                                        GetTop(watchWnd)+dif);
                SendMessage(editWnd, SIZE, GetClientRight(wnd), EditBottom);
            }
            else    {
                /* --- getting smaller --- */
                SendMessage(editWnd,
                    SIZE, GetClientRight(wnd), EditBottom);
                SendMessage(watchWnd, MOVE, GetLeft(watchWnd), 
                                        GetTop(watchWnd)+dif);
                rtn = DefaultWndProc(wnd, msg, p1, p2);
            }
            return rtn;
        }
        case SHOW_WINDOW:
            ThisSbarSetting =
                CheckBoxSetting(&Display, ID_SCROLLBARS);
            if (InterceptingShow)    {
                if (ThisSbarSetting != PrevSbarSetting)    {
                    if (ThisSbarSetting)
                        AddAttribute(editWnd,
                            VSCROLLBAR | HSCROLLBAR);
                    else     {
                        ClearAttribute(editWnd, VSCROLLBAR);
                        ClearAttribute(editWnd, HSCROLLBAR);
                    }
                }
                if (PrevScreenLines != cfg.ScreenLines)
                    SendMessage(wnd, SIZE, GetRight(wnd), cfg.ScreenLines-1);
            }
            break;
        case CLOSE_WINDOW:
            SendMessage(editWnd, CLOSE_WINDOW, 0, 0);
            break;
        case SETFOCUS:
            if (p1 && editWnd)    {
                SendMessage(editWnd, msg, p1, p2);
                return TRUE;
            }
            break;
        case COMMAND:
            switch ((int)p1)    {
                case ID_NEW:
                    OpenSourceCode(Untitled);
                    return TRUE;
                case ID_OPEN:
                    SelectFile();
                    return TRUE;
                case ID_SAVE:
                    SaveFile(FALSE);
                    return TRUE;
                case ID_SAVEAS:
                    SaveFile(TRUE);
                    return TRUE;
                case ID_PRINTSETUP:
                    DialogBox(wnd, &PrintSetup, TRUE, PrintSetupProc);
                    return TRUE;
                case ID_PRINT:
                    PrintSourceCode();
                    return TRUE;
                case ID_OUTPUT:
                    OutputScreen();
                    return TRUE;
                case ID_RUN:
                    RunProgram();
                    if (Exiting)
                        PostMessage(wnd, CLOSE_WINDOW, 0, 0);
                    return TRUE;
                case ID_STOP:
                    StopProgram();
                    return TRUE;
                case ID_EXAMINE:
                    ExamineVariable();
                    return TRUE;
                case ID_WATCH:
                    ToggleWatch();
                    return TRUE;
                case ID_ADDWATCH:
                    AddWatch();
                    return TRUE;
                case ID_SWITCHWINDOW:
                    SetNextFocus();
                    return TRUE;
                case ID_STEPOVER:
                    StepOverFunction();
                    return TRUE;
                case ID_STEP:
                    StepProgram();
                    if (Exiting)
                        PostMessage(wnd, CLOSE_WINDOW, 0, 0);
                    return TRUE;
                case ID_BREAKPOINT:
                    ToggleBreakpoint();
                    return TRUE;
                case ID_DELBREAKPOINTS:
                    DeleteBreakpoints();
                    return TRUE;
                case ID_COMMANDLINE:
                    CommandLine();
                    return TRUE;
                case ID_MEMORY:
                    Memory();
                    return TRUE;
                case ID_TAB2:
                    cfg.Tabs = 2;
                    ChangeTabs();
                    return TRUE;
                case ID_TAB4:
                    cfg.Tabs = 4;
                    ChangeTabs();
                    return TRUE;
                case ID_TAB6:
                    cfg.Tabs = 6;                    
                    ChangeTabs();
                    return TRUE;
                case ID_TAB8:
                    cfg.Tabs = 8;
                    ChangeTabs();
                    return TRUE;
                case ID_DISPLAY:
                    InterceptingShow = TRUE;
                    PrevSbarSetting =
                        CheckBoxSetting(&Display, ID_SCROLLBARS);
                    PrevScreenLines = cfg.ScreenLines;
                    rtn = DefaultWndProc(wnd, msg, p1, p2);
                    InterceptingShow = FALSE;
                    return rtn;
                case ID_EXIT:
                case ID_SYSCLOSE:
                    if (Stepping)    {
                        Exiting = TRUE;
                        StopProgram();
                        return TRUE;
                    }
                    break;
                case ID_ABOUT:
                    MessageBox
                    (
                         "About Quincy",
                        "     ZDDDDDDDDDDDDDDDDDDD?\n"
                        "     3   \\  \   \  \\   3\n"
                        "     3  [  [ [\  [ [  _  3\n"
                        "     3  [  [ [ _\[ [  \  3\n"
                        "     3   __[ _   _  __   3\n"
                        "     @DDDDDDDDDDDDDDDDDDDY\n"
                        "    The Quincy C Interpreter\n"
                        "          Version 4.0\n"
                        " Copyright (c) 1994 Al Stevens\n"
                        "       All Rights Reserved"
                    );
                    return TRUE;
                default:
                    break;
            }
            break;
        default:
            break;
    }
    return DefaultWndProc(wnd, msg, p1, p2);
}
/* --- The Open... command. Select a file  --- */
static void SelectFile(void)
{
    char FileName[64];
    if (OpenFileDialogBox("*.c", FileName))
        /* --- see if the document is already in --- */
        if (stricmp(FileName, editWnd->extension) != 0)
            OpenSourceCode(FileName);
}
/* --- open a document window and load a file --- */
static void OpenSourceCode(char *FileName)
{
    WINDOW wwnd;
    struct stat sb;
    char *ermsg;

    CloseSourceCode();
    wwnd = WatchIcon();
    if (strcmp(FileName, Untitled))    {
        editWnd->extension = DFmalloc(strlen(FileName)+1);
        strcpy(editWnd->extension, FileName);
        LoadFile();
    }
    ChangeQncTitle();
    SendMessage(wwnd, CLOSE_WINDOW, 0, 0);
    SendMessage(editWnd, PAINT, 0, 0);
}
/* --- Load source code file into editor text buffer --- */
static void LoadFile(void)
{
    FILE *fp;
    if ((fp = fopen(editWnd->extension, "rt")) != NULL)    {
        char *Buf;
        struct stat sb;

        stat(editWnd->extension, &sb);
        Buf = DFcalloc(1, sb.st_size+1);

        /* --- read the source file --- */
        fread(Buf, sb.st_size, 1, fp);
        fclose(fp);
        SendMessage(editWnd, SETTEXT, (PARAM) Buf, 0);
        free(Buf);
    }
}
/* ---------- save a file to disk ------------ */
static void SaveFile(int Saveas)
{
    FILE *fp;
    if (editWnd->extension == NULL || Saveas)    {
        char FileName[64];
        if (SaveAsDialogBox("*.c", FileName))    {
            if (editWnd->extension != NULL)
                free(editWnd->extension);
            editWnd->extension = DFmalloc(strlen(FileName)+1);
            strcpy(editWnd->extension, FileName);
        }
        else
            return;
    }
    if (editWnd->extension != NULL)    {
        WINDOW mwnd = MomentaryMessage("Saving the file");
        if ((fp = fopen(editWnd->extension, "wt")) != NULL)    {
            CollapseTabs(editWnd);
            fwrite(GetText(editWnd), strlen(GetText(editWnd)), 1, fp);
            fclose(fp);
            ExpandTabs(editWnd);
        }
        SendMessage(mwnd, CLOSE_WINDOW, 0, 0);
        ChangeQncTitle();
        SendMessage(editWnd, SETFOCUS, TRUE, 0);
    }
}
/* ------ display the row and column in the statusbar ------ */
static void ShowPosition(WINDOW wnd)
{
    char status[60];
    sprintf(status, "Line:%4d  Column: %2d", wnd->CurrLine+1, wnd->CurrCol+1);
    SendMessage(GetParent(wnd), ADDSTATUS, (PARAM) status, 0);
}
/* ----- close and save the source code -------- */
static void CloseSourceCode(void)
{
    if (editWnd->TextChanged)
        if (YesNoBox("Text changed. Save it?"))
            SendMessage(applWnd, COMMAND, ID_SAVE, 0);
    SendMessage(editWnd, CLEARTEXT, 0, 0);
    SendMessage(editWnd, PAINT, 0, 0);
    if (editWnd->extension != NULL)    {
        free(editWnd->extension);
        editWnd->extension = NULL;
    }
    DeleteAllWatches();
    DeleteBreakpoints();
    StopProgram();
}
/* ---- count the newlines in a block of text --- */
static int CountNewLines(char *beg, char *end)
{
    int ct = 0;
    while (beg <= end)
        if (*beg++ == '\n')
            ct++;
    return ct;
}
/* ---- count the newlines in a block of editor text --- */
static int CountBlockNewLines(WINDOW wnd)
{
    return TextBlockMarked(wnd) ?
            CountNewLines(TextBlockBegin(wnd), TextBlockEnd(wnd)) : 0;
}
/* ---- count the newlines in clipboard text --- */
static int CountClipboardNewLines(WINDOW wnd)
{
    return ClipboardLength ?
            CountNewLines(Clipboard, Clipboard+ClipboardLength-1) : 0;
}
/* ----- window processing module for the editor ----- */
static int QncEditorProc(WINDOW wnd,MESSAGE msg, PARAM p1,PARAM p2)
{
    int rtn;
    switch (msg)    {
        case SETFOCUS:
            rtn = DefaultWndProc(wnd, msg, p1, p2);
            if ((int)p1 == FALSE)    {
                SendMessage(GetParent(wnd), ADDSTATUS, 0, 0);
                if (ErrorCode == 0)
                    SendMessage(NULL, HIDE_CURSOR, 0, 0);
            }
            else 
                ShowPosition(wnd);
            return rtn;
        case SCROLL:
        case PAINT:
        {
            int lno;
            rtn = DefaultWndProc(wnd, msg, p1, p2);
            /* ---- update source line pointer and breakpoint displays ----- */
            for (lno = wnd->wtop+1;
                    lno <= wnd->wtop+ClientHeight(wnd); lno++)
                if ((Stepping && lno == LastStep) ||
                        isBreakpoint(lno))
                    DisplaySourceLine(lno);
            return rtn;
        }
        case KEYBOARD:
            /* --- if user adds/deletes lines,
                    adjust breakpoint table in debugger --- */
            if ((int) p1 == '\r')
                AdjustBreakpointsInserting(wnd->CurrLine+1, 1);
            else if ((int) p1 == DEL && *CurrChar == '\n')
                AdjustBreakpointsDeleting(wnd->CurrLine+2, 1);
            break;
        case KEYBOARD_CURSOR:
            rtn = DefaultWndProc(wnd, msg, p1, p2);
            SendMessage(NULL, SHOW_CURSOR, 0, 0);
            ShowPosition(wnd);
            return rtn;
        case COMMAND:
            switch ((int) p1)    {
                case ID_SEARCH:
                    SearchText(wnd);
                    return TRUE;
                case ID_REPLACE:
                    ReplaceText(wnd);
                    return TRUE;
                case ID_SEARCHNEXT:
                    SearchNext(wnd);
                    return TRUE;
                case ID_CUT:
                    CopyToClipboard(wnd);
                    SendMessage(wnd, COMMAND, ID_DELETETEXT, 0);
                    SendMessage(wnd, PAINT, 0, 0);
                    return TRUE;
                case ID_COPY:
                    CopyToClipboard(wnd);
                    ClearTextBlock(wnd);
                    SendMessage(wnd, PAINT, 0, 0);
                    return TRUE;
                case ID_PASTE:
                    /* --- if user pastes lines,
                        adjust breakpoint table in debugger --- */
                    AdjustBreakpointsInserting(wnd->CurrLine+1,
                            CountClipboardNewLines(wnd));
                    PasteFromClipboard(wnd);
                    SendMessage(wnd, PAINT, 0, 0);
                    return TRUE;
                case ID_DELETETEXT:
                    /* --- if user deletes lines,
                        adjust breakpoint table in debugger --- */
                    AdjustBreakpointsDeleting(wnd->BlkBegLine+1,
                            CountBlockNewLines(wnd));
                    rtn = DefaultWndProc(wnd, msg, p1, p2);
                    SendMessage(wnd, PAINT, 0, 0);
                    return rtn;
                case ID_HELP:
                    DisplayHelp(wnd, "QUINCY");
                    return TRUE;
                default:
                    break;
            }
            break;
        case CLOSE_WINDOW:
            CloseSourceCode();
            break;
        default:
            break;
    }
    return DefaultWndProc(wnd, msg, p1, p2);
}
/* -- point to the name component of a file specification -- */
static char *NameComponent(char *FileName)
{
    char *Fname;
    if ((Fname = strrchr(FileName, '\\')) == NULL)
        if ((Fname = strrchr(FileName, ':')) == NULL)
            Fname = FileName-1;
    return Fname + 1;
}
/* ---- rebuild display when user changes tab sizes ---- */
static void ChangeTabs(void)
{
    FixTabMenu();
    CollapseTabs(editWnd);
    ExpandTabs(editWnd);
}
/* ---- update the tab menu when user changes tabs ---- */
static void FixTabMenu(void)
{
    char *cp = GetCommandText(&MainMenu, ID_TABS);
    if (cp != NULL)    {
        cp = strchr(cp, '(');
        if (cp != NULL)    {
            *(cp+1) = cfg.Tabs + '0';
            if (GetClass(inFocus) == POPDOWNMENU)
                SendMessage(inFocus, PAINT, 0, 0);
        }
    }
}
/* ------- display the program's output screen ----- */
static void OutputScreen(void)
{
    SendMessage(NULL, HIDE_CURSOR, 0, 0);
    HideIDE();
    getkey();
    UnHideIDE();
    SendMessage(NULL, SHOW_CURSOR, 0, 0);
}
/* ---- the user may change certain interpreter memory parameters --- */
static void Memory(void)
{
    char text[20], *tx;
    int i;
    static struct prm {
        unsigned *max;
        unsigned id;
    } parms[] = {
        { &MaxProgram,   ID_PROGSIZE }, { &MaxDataSpace, ID_DATASPACE },
        { &MaxVariables, ID_VARIABLES }, { &MaxStack,     ID_STACK },
        { &MaxJumps,     ID_JUMP }
    };
    for (i = 0; i < (sizeof parms / sizeof(struct prm)); i++) {
        sprintf(text, "%u", *parms[i].max);
        SetEditBoxText(&MemoryDB, parms[i].id, text);
    }
    if (DialogBox(applWnd, &MemoryDB, TRUE, NULL))    {
        for (i = 0; i < (sizeof parms/sizeof(struct prm)); i++)
            *parms[i].max = atoi(GetEditBoxText(&MemoryDB, parms[i].id));
    }
}


